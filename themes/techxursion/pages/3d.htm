title = "Home"
url = "/3d"
layout = "default"
==
<section class="three">
	<div class="container">
		<script type="importmap">
		{
			"imports": {
				"three": "{{'/themes/techxursion/assets/threejs/build/three.module.js'}}",
				"three/addons/": "{{'/themes/techxursion/assets/threejs/examples/jsm/'}}"
			}
		}
		</script>
        <div class="contthree"></div>
		<script type="module">
        import * as THREE from 'three';
        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
        import { TransformControls } from 'three/addons/controls/TransformControls.js';
        import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
        import { DRACOLoader } from 'three/addons/loaders/DRACOLoader.js';
        import { CCDIKSolver, CCDIKHelper } from 'three/addons/animation/CCDIKSolver.js';
        import Stats from 'three/addons/libs/stats.module.js';
        import { GUI } from 'three/addons/libs/lil-gui.module.min.js';

        
        const scene = new THREE.Scene();

// Create camera
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.z = 5;

// Create renderer
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.querySelector('.contthree').appendChild(renderer.domElement);

// Create orbit controls
const controls = new OrbitControls(camera, renderer.domElement);

// Add bright ambient light
const ambientLight = new THREE.AmbientLight(0x404040, 40); // Increase intensity
scene.add(ambientLight);

// Load GLB model
const loader = new GLTFLoader();
loader.load('/themes/techxursion/assets/lab.glb', (gltf) => {
    const model = gltf.scene;
    scene.add(model);

    // Update the camera position based on the bounding box of the model
    const box = new THREE.Box3().setFromObject(model);
    const center = box.getCenter(new THREE.Vector3());
    controls.target.copy(center);
    controls.update();
    renderer.setSize(800, 800);
});

// Handle window resize
window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(800, 800);
});



// Animation loop
const animate = () => {
    requestAnimationFrame(animate);

    // Update controls
    controls.update();

    // Handle keyboard input for camera movement
    const speed = 0.1;
   
    renderer.render(scene, camera);
};

animate();
    </script>

</div>
</section>